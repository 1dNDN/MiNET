<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".md" #>

<#@ assembly name="System.Xml"#>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#
string path = this.Host.ResolvePath("");
XmlDocument doc = new XmlDocument();
doc.Load(path + @"\protocol.xml");


#>
**WARNING: T4 GENERATED MARKUP - DO NOT EDIT**

##ALL PACKAGES

| ID  | ID (hex) | ID (dec) | Type |
|:--- |:---------|---------:|:-----|
<#	
foreach (XmlNode pdu in doc.SelectNodes("//pdu"))
{
#>
| <#= pdu.Attributes["name"].Value #> | <#= pdu.Attributes["id"].Value #> | <#= Int32.Parse(pdu.Attributes["id"].Value.Substring(2, 2), NumberStyles.AllowHexSpecifier) #> |<#= CodeTypeName(pdu.Attributes["name"].Value) #> |  
<#	
} // foreach
#>


<#


Dictionary<string, Tuple<string, string>> constantsLoopup = new Dictionary<string, Tuple<string, string>>();
foreach (XmlNode constant in doc.SelectNodes("//constant"))
{
	var attributes = constant.Attributes;
	constantsLoopup.Add(attributes["id"].Value, new Tuple<string, string>(attributes["type"].Value, attributes["value"].Value));
}

#>
##Constants
<#	

#>
##Packages

<#	

foreach (XmlNode pdu in doc.SelectNodes("//pdu"))
{
	string pduComment = (pdu.PreviousSibling == null? null: pdu.PreviousSibling.Value)??"";
	string typeIdName = pdu.Attributes["name"].Value;
	string typeName = CodeTypeName(pdu.Attributes["name"].Value);
	string typeId = pdu.Attributes["id"].Value;
	string baseType = pdu.Attributes["online"] == null? "Package": pdu.Attributes["online"].Value.Equals(Boolean.TrueString, StringComparison.InvariantCultureIgnoreCase)?"ConnectedPackage":"Package";
#>
##Package: <#= typeIdName #> (<#= typeId #>)

<#= pduComment.Replace("\t","") #>

<#	
#>
###Fields

| Name | Type |
|:-----|:-----|
<#
	foreach (XmlNode field in pdu.ChildNodes)
	{
		if(field.NodeType != XmlNodeType.Element) 
		{
#>
###Comments
<#= field.Value #>
<#
			continue;
		}

		string name = field.Attributes["name"].Value;
		string type = field.Attributes["type"].Value;

#>
<#

		if (constantsLoopup.ContainsKey(field.Attributes["type"].Value))
		{
			type = constantsLoopup[field.Attributes["type"].Value].Item1;
			string value = constantsLoopup[field.Attributes["type"].Value].Item2;
#>
<#
		} 
		else 
		{
#>
<#
		} 
#>
|<#= name #> | <#= type #> |
<#

	} // foreach
#>

<#
} // foreach
#>


<#+
private string UpperInitial(string name)
{ 
	return name[0].ToString().ToUpperInvariant() + name.Substring(1); 
}

private string CodeTypeName(string name) 
{
	return CodeName(name, true);
}

private string CodeFieldName(string name) 
{
	return CodeName(name, false);
}

private string CodeName(string name, bool firstUpper = false)
{
    name = name.ToLowerInvariant();

    string result = name;
    bool upperCase = firstUpper;

    result = string.Empty;
    for (int i = 0; i < name.Length; i++)
    {
        if (name[i] == ' ' || name[i] == '_')
        {
            upperCase = true;
        }
        else
        {
            if ((i == 0 && firstUpper) || upperCase)
            {
                result += name[i].ToString().ToUpperInvariant();
                upperCase = false;
            }
            else
            {
                result += name[i];
            }
        }
    }

	result = result.Replace(@"[]", "s");
    return result;
}

public string SafeToString(XmlNode node)
{
	if(node == null) return "";

	return node.Value;
}
#>